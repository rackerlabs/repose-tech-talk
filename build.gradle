buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.7'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.ajoberstar:gradle-git:1.3.2'
    }
}

apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'org.asciidoctor.convert'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import org.ajoberstar.grgit.Grgit


dependencies {
    asciidoctor 'org.asciidoctor:asciidoctorj-diagram:1.5.0'
}


//Docker Stuff
File dockerDir = file("$buildDir/docker")

task copyDemoFiles {

    doLast {
        dockerDir.mkdirs()

        copy {
            from "$projectDir/src/docker"
            into dockerDir
        }

        copy {
            from "$projectDir/src/scripts"
            into "$dockerDir/scripts"
        }

        copy {
            from "$projectDir/src/fake-services"
            into "$dockerDir/fake-services"
        }

        copy {
            from "$projectDir/src/artifacts"
            into "$dockerDir/artifacts"
        }
    }
}

task buildLogDirectory {
    doLast {
        file("$buildDir/logs").mkdirs()
    }
}

task buildDemoImage(type: DockerBuildImage) {
    dependsOn copyDemoFiles
    inputDir = dockerDir
    tag = 'repose/demo'
}

task createTechTalkDemoContainer(type: DockerCreateContainer) {
    dependsOn buildDemoImage, buildLogDirectory
    targetImageId { buildDemoImage.getImageId() }
    portBindings = ['8080:8080']
    binds = ["$projectDir/src/configs/techtalk":"/etc/repose", "$buildDir/logs":"/var/log/repose"]
}

task createTicketingRbacDemoContainer(type: DockerCreateContainer) {
    dependsOn buildDemoImage, buildLogDirectory
    targetImageId { buildDemoImage.getImageId() }
    portBindings = ['8080:8080']
    binds = ["$projectDir/src/configs/ticketingrbac":"/etc/repose", "$buildDir/logs":"/var/log/repose"]
}

task startTechTalkDemoContainer(type: DockerStartContainer) {
    dependsOn createTechTalkDemoContainer
    targetContainerId { createTechTalkDemoContainer.getContainerId() }
}

task startTicketingRbacDemoContainer(type: DockerStartContainer) {
    dependsOn createTicketingRbacDemoContainer
    targetContainerId { createTicketingRbacDemoContainer.getContainerId() }
}

//AsciiDoctor Stuff
File deckJsTemplates = file("$buildDir/deckJsTemplates")
File deckJs = file("$buildDir/deckJs")

task getDeckJsStuff {
    doLast {
        deckJsTemplates.deleteDir()
        deckJs.deleteDir()

        def templateRepo = Grgit.clone(
                uri: 'https://github.com/asciidoctor/asciidoctor-deck.js',
                refToCheckout: 'master',
                dir: deckJsTemplates,
        )

        def jsRepo = Grgit.clone(
                uri: 'https://github.com/imakewebthings/deck.js',
                refToCheckout: 'master',
                dir: deckJs,
        )
    }
}

asciidoctor {
    requires 'asciidoctor-diagram'
    options template_dirs: ["$deckJsTemplates/templates/haml"]
    attributes 'source-highlighter': 'coderay'

    resources {
        from deckJs

        into './deck.js'
    }
}

asciidoctor.dependsOn getDeckJsStuff
